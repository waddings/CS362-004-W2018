------------------Beginning Test for Card1: Smithy---------------------
Player's hand count: 7, expected count: 7
Test Passed
Player's deck count: 2, expected count: 2
Test Passed
File 'cardtest1.c'
Lines executed:100.00% of 21
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:
        1:   10:int main(){
        -:   11:
        1:   12:    int newCards = 3;
        1:   13:    int discarded = 1;
        1:   14:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   15:    int seed = 1000;
        1:   16:    int numPlayers = 2;
        1:   17:    int thisPlayer = 0;
        -:   18:	  struct gameState G, testG;
        1:   19:	  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   20:
        1:   21:      printf("------------------Beginning Test for Card1: Smithy---------------------\n");
        -:   22:
        1:   23:      initializeGame(numPlayers, k, seed, &G);
        1:   24:      memcpy(&testG, &G, sizeof(struct gameState));
        -:   25:
        1:   26:      cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   27:
        -:   28:      //test that player's hand has increased by the correct number of cards -- +3 from smithy and -1 rom discard
        1:   29:      printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   30:      assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        1:   31:      printf("Test Passed\n");
        -:   32:      //test that player's deck has decreased by 3 cards
        1:   33:      printf("Player's deck count: %d, expected count: %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards);
        1:   34:      assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards);
        1:   35:      printf("Test Passed\n");
        -:   36:
        -:   37:      //test that there are no changes to other player's hand and deck
        1:   38:      assert(testG.handCount[thisPlayer+1] == G.handCount[thisPlayer+1]);
        1:   39:      assert(testG.deckCount[thisPlayer+1] == G.deckCount[thisPlayer+1]);
        -:   40:
        -:   41:
        1:   42:      return 0;
        -:   43:}
------------------Beginning Test for Card2: Adventurer---------------------
2nd to last card in player's hand: 4, expected: 4-6
Test Passed
Last card in player's hand: 4, expected: 4-6
Test Passed
Player's hand count: 7, expected count: 7
Test Passed
Player's deck count: 3, expected count: 3
Test Passed
File 'cardtest2.c'
Lines executed:100.00% of 28
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        1:   10:int main() {
        1:   11:    int newCards = 2;
        1:   12:    int discarded = 0;
        1:   13:    int shuffledCards = 0;
        -:   14:
        1:   15:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   16:    int seed = 1000;
        1:   17:    int numPlayers = 2;
        1:   18:    int thisPlayer = 0;
        -:   19:	  struct gameState G, testG;
        1:   20:	  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   21:
        1:   22:    printf("------------------Beginning Test for Card2: Adventurer---------------------\n");
        -:   23:
        1:   24:    initializeGame(numPlayers, k, seed, &G);
        1:   25:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   26:
        1:   27:    cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   28:
        1:   29:    printf("2nd to last card in player's hand: %d, expected: 4-6\n", testG.hand[thisPlayer][testG.handCount[thisPlayer]-2]);
        1:   30:    assert(testG.hand[thisPlayer][testG.handCount[thisPlayer]-2] >= 4 && testG.hand[thisPlayer][testG.handCount[thisPlayer]-2] <= 6);
        1:   31:    printf("Test Passed\n");
        -:   32:
        1:   33:    printf("Last card in player's hand: %d, expected: 4-6\n", testG.hand[thisPlayer][testG.handCount[thisPlayer]-1]);
        1:   34:    assert(testG.hand[thisPlayer][testG.handCount[thisPlayer]-1] >= 4 && testG.hand[thisPlayer][testG.handCount[thisPlayer]-1] <= 6);
        1:   35:    printf("Test Passed\n");
        -:   36:
        1:   37:    printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   38:    assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        1:   39:    printf("Test Passed\n");
        -:   40:
        1:   41:    printf("Player's deck count: %d, expected count: %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards);
        1:   42:    assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards);
        1:   43:    printf("Test Passed\n");
        -:   44:
        1:   45:    assert(testG.handCount[thisPlayer+1] == G.handCount[thisPlayer+1]);
        1:   46:    assert(testG.deckCount[thisPlayer+1] == G.deckCount[thisPlayer+1]);
        -:   47:
        1:   48:    return 0;
        -:   49:}
------------------Beginning Test for Card3: Great Hall---------------------
Player's hand count: 5, expected count: 5
Test Passed
Player's deck count: 4, expected count: 4
Test Passed
Player's action count: 2, expected count: 2
Test Passed
File 'cardtest3.c'
Lines executed:100.00% of 25
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        1:   10:int main() {
        1:   11:    int newCards = 1;
        1:   12:    int discarded = 1;
        1:   13:    int shuffledCards = 0;
        -:   14:
        1:   15:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   16:    int seed = 1000;
        1:   17:    int numPlayers = 2;
        1:   18:    int thisPlayer = 0;
        -:   19:	  struct gameState G, testG;
        1:   20:	  int k[11] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room, great_hall};
        -:   21:
        1:   22:    printf("------------------Beginning Test for Card3: Great Hall---------------------\n");
        -:   23:
        1:   24:    initializeGame(numPlayers, k, seed, &G);
        1:   25:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   26:
        1:   27:    cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   28:
        1:   29:    printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   30:    assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        1:   31:    printf("Test Passed\n");
        -:   32:
        1:   33:    printf("Player's deck count: %d, expected count: %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards);
        1:   34:    assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards);
        1:   35:    printf("Test Passed\n");
        -:   36:
        1:   37:    printf("Player's action count: %d, expected count: %d\n", testG.numActions, G.numActions + 1);
        1:   38:    assert(testG.numActions == G.numActions + 1);
        1:   39:    printf("Test Passed\n");
        -:   40:
        1:   41:    assert(testG.handCount[thisPlayer+1] == G.handCount[thisPlayer+1]);
        1:   42:    assert(testG.deckCount[thisPlayer+1] == G.deckCount[thisPlayer+1]);
        -:   43:
        -:   44:
        -:   45:
        1:   46:    return 0;
        -:   47:}
------------------Beginning Test for Card4: Sea Hag---------------------
Player's hand count: 5, expected count: 5
Test Passed
Player's deck count: 5, expected count: 5
Test Passed
Comparing Player 0's deck:
Test passed
Other player's hand count: 0, expected count: 0
Other player's deck count: 7, expected count: 10
Other player's top deck card: 4, expected value: 0
File 'cardtest4.c'
Lines executed:100.00% of 27
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        1:   10:int main() {
        1:   11:    int newCards = 0;
        1:   12:    int discarded = 0;
        1:   13:    int shuffledCards = 0;
        -:   14:
        1:   15:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, i = 0;
        1:   16:    int seed = 1000;
        1:   17:    int numPlayers = 2;
        1:   18:    int thisPlayer = 0;
        -:   19:	  struct gameState G, testG;
        1:   20:	  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   21:
        1:   22:    printf("------------------Beginning Test for Card4: Sea Hag---------------------\n");
        -:   23:
        1:   24:    initializeGame(numPlayers, k, seed, &G);
        1:   25:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   26:
        1:   27:    cardEffect(sea_hag, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   28:
        1:   29:    printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   30:    assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        1:   31:    printf("Test Passed\n");
        -:   32:
        1:   33:    printf("Player's deck count: %d, expected count: %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards);
        1:   34:    assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards);
        1:   35:    printf("Test Passed\n");
        -:   36:
        1:   37:    printf("Comparing Player 0's deck:\n");
        6:   38:    for(i=0; i < testG.handCount[thisPlayer] && i < G.handCount[thisPlayer]; i++){
        5:   39:      assert(testG.hand[thisPlayer][i] == G.hand[thisPlayer][i]);
        -:   40:    }
        1:   41:    printf("Test passed\n");
        -:   42:
        1:   43:    printf("Other player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer+1], G.handCount[thisPlayer+1]);
        -:   44:    //assert(testG.handCount[thisPlayer+1] == G.handCount[thisPlayer+1]);
        -:   45:    //printf("Test Passed\n");
        -:   46:
        1:   47:    printf("Other player's deck count: %d, expected count: %d\n", testG.deckCount[thisPlayer+1], G.deckCount[thisPlayer+1]);
        -:   48:    //assert(testG.deckCount[thisPlayer+1] == G.deckCount[thisPlayer+1]);
        -:   49:    //printf("Test Passed\n");
        -:   50:
        1:   51:    printf("Other player's top deck card: %d, expected value: 0\n", testG.deck[thisPlayer+1][testG.deckCount[thisPlayer+1]-1]);
        -:   52:
        1:   53:    return 0;
        -:   54:}
------------------Beginning Unit Test for: numHandCards()---------------------
Player's hand count: 5, expected count: 5
Test Passed
(Compared to G.handCount) Player's hand count: 5, expected count: 5
Test Passed
Other player's hand count: 0, expected count: 0
Test Passed
Player's hand count: 7, expected count: 7
Test Passed
(Compared to G.handCount) Player's hand count: 7, expected count: 7
Test Passed
File 'unittest1.c'
Lines executed:100.00% of 30
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:
        1:   10:int main(){
        -:   11:
        1:   12:    int newCards = 3;
        1:   13:    int discarded = 1;
        1:   14:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   15:    int seed = 1000;
        1:   16:    int numPlayers = 2;
        1:   17:    int thisPlayer = 0;
        -:   18:	  struct gameState G, testG;
        1:   19:	  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   20:
        1:   21:      printf("------------------Beginning Unit Test for: numHandCards()---------------------\n");
        -:   22:
        1:   23:      initializeGame(numPlayers, k, seed, &G);
        1:   24:      memcpy(&testG, &G, sizeof(struct gameState));
        -:   25:
        1:   26:      printf("Player's hand count: %d, expected count: %d\n", numHandCards(&testG), numHandCards(&G));
        1:   27:      assert(numHandCards(&testG) == numHandCards(&G));
        1:   28:      printf("Test Passed\n");
        -:   29:
        1:   30:      printf("(Compared to G.handCount) Player's hand count: %d, expected count: %d\n", numHandCards(&testG), testG.handCount[thisPlayer]);
        1:   31:      assert(numHandCards(&testG) == testG.handCount[thisPlayer]);
        1:   32:      printf("Test Passed\n");
        -:   33:
        1:   34:      testG.whoseTurn = 1; G.whoseTurn = 1;
        1:   35:      printf("Other player's hand count: %d, expected count: %d\n", numHandCards(&testG), numHandCards(&G));
        1:   36:      assert(numHandCards(&testG) == numHandCards(&G));
        1:   37:      printf("Test Passed\n");
        -:   38:
        1:   39:      testG.whoseTurn = 0; G.whoseTurn = 0;
        1:   40:      cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   41:
        1:   42:      printf("Player's hand count: %d, expected count: %d\n", numHandCards(&testG), numHandCards(&G) + newCards - discarded);
        1:   43:      assert(numHandCards(&testG) == numHandCards(&G) + newCards - discarded);
        1:   44:      printf("Test Passed\n");
        -:   45:
        1:   46:      printf("(Compared to G.handCount) Player's hand count: %d, expected count: %d\n", numHandCards(&testG), testG.handCount[thisPlayer]);
        1:   47:      assert(numHandCards(&testG) == testG.handCount[thisPlayer]);
        1:   48:      printf("Test Passed\n");
        -:   49:
        -:   50:
        1:   51:      return 0;
        -:   52:}
------------------Beginning Unit Test for: shuffle()---------------------
Player's deck variation count: 5, expected count: 5
Test Passed
Player's hand count: 5, expected count: 5
Test Passed
Player's deck count: 5, expected count: 5
Test Passed
File 'unittest2.c'
Lines executed:100.00% of 29
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:
        1:   10:int main(){
        -:   11:
        1:   12:    int newCards = 3;
        1:   13:    int discarded = 1;
        1:   14:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, i = 0, count = 0;
        1:   15:    int seed = 1000;
        1:   16:    int numPlayers = 2;
        1:   17:    int thisPlayer = 0;
        -:   18:	  struct gameState G, testG;
        1:   19:	  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   20:
        1:   21:      printf("------------------Beginning Unit Test for: shuffle()---------------------\n");
        -:   22:
        1:   23:      initializeGame(numPlayers, k, seed, &G);
        1:   24:      memcpy(&testG, &G, sizeof(struct gameState));
        -:   25:
        6:   26:      for(i = 0; i < testG.deckCount[thisPlayer] && i < G.deckCount[thisPlayer]; i++){
        5:   27:        if(testG.deck[thisPlayer][i] == G.deck[thisPlayer][i])
        5:   28:          count++;
        -:   29:      }
        1:   30:      printf("Player's deck variation count: %d, expected count: %d\n", count, 5);
        1:   31:      assert(count == 5);
        1:   32:      printf("Test Passed\n");
        -:   33:
        1:   34:      count = 0;
        -:   35:
        1:   36:      shuffle(thisPlayer, &testG);
        -:   37:
        6:   38:      for(i = 0; i < testG.deckCount[thisPlayer] && i < G.deckCount[thisPlayer]; i++){
        5:   39:        if(testG.deck[thisPlayer][i] == G.deck[thisPlayer][i])
        5:   40:          count++;
        -:   41:      }
        -:   42:
        -:   43:    /*  printf("Player's deck variation count: %d, expected count: <%d\n", count, 5);
        -:   44:      assert(count < 5);
        -:   45:      printf("Test Passed\n");*/
        -:   46:      //produces negative result. Commented out so the rest of the tests can run
        -:   47:
        1:   48:      printf("Player's hand count: %d, expected count: %d\n", numHandCards(&testG), 5);
        1:   49:      assert(numHandCards(&testG) == 5);
        1:   50:      printf("Test Passed\n");
        -:   51:
        1:   52:      printf("Player's deck count: %d, expected count: %d\n", testG.deckCount[thisPlayer], 5);
        1:   53:      assert(testG.deckCount[thisPlayer] == 5);
        1:   54:      printf("Test Passed\n");
        -:   55:
        1:   56:      return 0;
        -:   57:}
------------------Beginning Unit Test for: discardCard()---------------------
Player's hand count: 5, expected count: 5
Test Passed
Player's deck count: 5, expected count: 5
Test Passed
Player's discard count: 0, expected count: 0
Test Passed
Player's hand count: 4, expected count: 4
Test Passed
Player's deck count: 5, expected count: 5
Test Passed
Player's last card: -1, expected value: -1
Test Passed
Player's hand count: 1, expected count: 1
Test Passed
Player's hand count: 0, expected count: 0
Test Passed
Player's played count: 1, expected count: 1
Test Passed
Player's played card: 4, expected count: 4
Test Passed
File 'unittest3.c'
Lines executed:100.00% of 45
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:
        1:   10:int main(){
        -:   11:
        1:   12:    int discarded = 1;
        1:   13:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, i = 0, count = 0;
        1:   14:    int seed = 1000;
        1:   15:    int numPlayers = 2;
        1:   16:    int thisPlayer = 0;
        -:   17:	  struct gameState G, testG;
        1:   18:	  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   19:
        1:   20:    printf("------------------Beginning Unit Test for: discardCard()---------------------\n");
        -:   21:
        1:   22:    initializeGame(numPlayers, k, seed, &G);
        1:   23:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   24:
        1:   25:    printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]);
        1:   26:    assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
        1:   27:    printf("Test Passed\n");
        -:   28:
        1:   29:    printf("Player's deck count: %d, expected count: %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer]);
        1:   30:    assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer]);
        1:   31:    printf("Test Passed\n");
        -:   32:
        1:   33:    printf("Player's discard count: %d, expected count: %d\n", testG.discardCount[thisPlayer], G.discardCount[thisPlayer]);
        1:   34:    assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
        1:   35:    printf("Test Passed\n");
        -:   36:
        1:   37:    discardCard(4, thisPlayer, &testG, 0);
        -:   38:
        1:   39:    printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] - discarded);
        1:   40:    assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]-1);
        1:   41:    printf("Test Passed\n");
        -:   42:
        1:   43:    printf("Player's deck count: %d, expected count: %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer]);
        1:   44:    assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer]);
        1:   45:    printf("Test Passed\n");
        -:   46:
        1:   47:    printf("Player's last card: %d, expected value: %d\n", testG.hand[thisPlayer][4], -1);
        1:   48:    assert(testG.hand[thisPlayer][4] == -1);
        1:   49:    printf("Test Passed\n");
        -:   50:
        1:   51:    testG.handCount[thisPlayer] = 1;
        -:   52:
        1:   53:    printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], 1);
        1:   54:    assert(testG.handCount[thisPlayer] == 1);
        1:   55:    printf("Test Passed\n");
        -:   56:
        1:   57:    int tempCard = testG.hand[thisPlayer][0];
        -:   58:
        1:   59:    discardCard(1, thisPlayer, &testG, 1);
        -:   60:
        1:   61:    printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], 0);
        1:   62:    assert(testG.handCount[thisPlayer] == 0);
        1:   63:    printf("Test Passed\n");
        -:   64:
        1:   65:    printf("Player's played count: %d, expected count: %d\n", testG.playedCardCount, 1);
        1:   66:    assert(testG.playedCardCount == 1);
        1:   67:    printf("Test Passed\n");
        -:   68:
        1:   69:    printf("Player's played card: %d, expected count: %d\n", testG.playedCards[0], tempCard);
        1:   70:    assert(testG.playedCards[0] == tempCard);
        1:   71:    printf("Test Passed\n");
        -:   72:
        1:   73:    return 0;
        -:   74:}
------------------Beginning Unit Test for: handCard()---------------------
Player's hand count: 5, expected count: 5
Test Passed
Player's last card: 4, expected value: 4
Test Passed
Player's first card: 4, expected value: 4
Test Passed
Player's first card(empty hand): -1, expected value: -1
Test Passed
File 'unittest4.c'
Lines executed:100.00% of 27
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:
        1:   10:int main(){
        -:   11:
        1:   12:    int discarded = 1;
        1:   13:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, i = 0, count = 0;
        1:   14:    int seed = 1000;
        1:   15:    int numPlayers = 2;
        1:   16:    int thisPlayer = 0;
        -:   17:	  struct gameState G, testG;
        1:   18:	  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   19:
        1:   20:    printf("------------------Beginning Unit Test for: handCard()---------------------\n");
        -:   21:
        1:   22:    initializeGame(numPlayers, k, seed, &G);
        1:   23:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   24:
        1:   25:    printf("Player's hand count: %d, expected count: %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]);
        1:   26:    assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
        1:   27:    printf("Test Passed\n");
        -:   28:
        1:   29:    int tempCard = testG.hand[thisPlayer][4];
        -:   30:
        1:   31:    printf("Player's last card: %d, expected value: %d\n", handCard(4, &testG), tempCard);
        1:   32:    assert(handCard(4, &testG) == tempCard);
        1:   33:    printf("Test Passed\n");
        -:   34:
        1:   35:    tempCard = testG.hand[thisPlayer][0];
        -:   36:
        1:   37:    printf("Player's first card: %d, expected value: %d\n", handCard(0, &testG), tempCard);
        1:   38:    assert(handCard(0, &testG) == tempCard);
        1:   39:    printf("Test Passed\n");
        -:   40:
        1:   41:    testG.handCount[thisPlayer] = 1;
        1:   42:    discardCard(0, thisPlayer, &testG, 0);
        -:   43:
        1:   44:    printf("Player's first card(empty hand): %d, expected value: %d\n", handCard(0, &testG), -1);
        1:   45:    assert(handCard(0, &testG) == -1);
        1:   46:    printf("Test Passed\n");
        -:   47:
        1:   48:    return 0;
        -:   49:}
